/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useAnimations, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import { Schema } from "leva/dist/declarations/src/types";
import { ILipSync } from "~/types/chat.type";
import { useChat } from "../chat/ChatProvider";

type GLTFResult = GLTF & {
  nodes: {
    Body_Mesh: THREE.SkinnedMesh;
    Eye_Mesh: THREE.SkinnedMesh;
    EyeAO_Mesh: THREE.SkinnedMesh;
    Eyelash_Mesh: THREE.SkinnedMesh;
    Head_Mesh: THREE.SkinnedMesh;
    Teeth_Mesh: THREE.SkinnedMesh;
    Tongue_Mesh: THREE.SkinnedMesh;
    avaturn_hair_0: THREE.SkinnedMesh;
    avaturn_hair_1: THREE.SkinnedMesh;
    avaturn_shoes_0: THREE.SkinnedMesh;
    avaturn_look_0: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    Body: THREE.MeshStandardMaterial;
    Eyes: THREE.MeshStandardMaterial;
    EyeAO: THREE.MeshStandardMaterial;
    Eyelash: THREE.MeshStandardMaterial;
    Head: THREE.MeshStandardMaterial;
    Teeth: THREE.MeshStandardMaterial;
    avaturn_hair_0_material: THREE.MeshStandardMaterial;
    avaturn_hair_1_material: THREE.MeshStandardMaterial;
    avaturn_shoes_0_material: THREE.MeshStandardMaterial;
    avaturn_look_0_material: THREE.MeshStandardMaterial;
  };
};
let setupMode = false;

const corresponding = {
  0: "viseme_sil",
  1: "viseme_nn",
  2: "viseme_E",
  3: "viseme_aa",
  4: "viseme_CH",
  5: "viseme_O",
  7: "viseme_I",
  8: "viseme_U",
  9: "viseme_TH",
  10: "viseme_DD",
  11: "viseme_RR",
  12: "viseme_FF",
  14: "viseme_SS",
  18: "viseme_kk",
  19: "viseme_PP",
} as { [x: string]: string };

export function Avatar(
  props: JSX.IntrinsicElements["group"] & { url: string }
) {
  const model = useRef<THREE.Group>(null);

  const { nodes, materials, scene } = useGLTF(props.url) as GLTFResult;

  const { animations } = useGLTF("/models/avaturn.animations.glb");

  const { actions } = useAnimations(animations, model);

  const [facialExpression, setFacialExpression] = useState("");

  const [lipsync, setLipsync] = useState<undefined | ILipSync>();

  const audio = useRef<HTMLAudioElement | null>();

  const { reply } = useChat();

  const mixer = useRef<THREE.AnimationMixer>();

  const [animation, setAnimation] = useState<string>(() =>
    animations.find((e) => e.name === "idle") ? "idle" : animations[0].name
  );

  useEffect(() => {
    useGLTF.preload("/models/avaturn.animations.glb");

    () => {
      actions[animation]?.fadeOut(2);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const facialExpressions = {
    default: {},
    smile: {
      browInnerUp: 0.17,
      eyeSquintLeft: 0.4,
      eyeSquintRight: 0.44,
      noseSneerLeft: 0.1700000727403593,
      noseSneerRight: 0.14000002836874015,
      mouthPressLeft: 0.61,
      mouthPressRight: 0.41000000000000003,
    },
    funnyFace: {
      jawLeft: 0.63,
      mouthPucker: 0.53,
      noseSneerLeft: 1,
      noseSneerRight: 0.39,
      mouthLeft: 1,
      eyeLookUpLeft: 1,
      eyeLookUpRight: 1,
      cheekPuff: 0.9999924982764238,
      mouthDimpleLeft: 0.414743888682652,
      mouthRollLower: 0.32,
      mouthSmileLeft: 0.35499733688813034,
      mouthSmileRight: 0.35499733688813034,
    },
  } as Record<string, { [key: string]: number }>;

  useControls("AvatarControls", {
    animation: {
      value: animation,
      options: animations.map((e) => e.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      value: "default",
      options: Object.keys(facialExpressions),
      onChange: (val) => setFacialExpression(val),
    },
    enableSetup: button(() => (setupMode = true)),
    disableSetup: button(() => (setupMode = false)),
  });

  const lerp = (target: string, value: number, speed = 0.1) => {
    scene.traverse((child) => {
      if (child instanceof THREE.SkinnedMesh && child.morphTargetDictionary) {
        const mesh = child.morphTargetDictionary[target];
        if (mesh == null || child.morphTargetInfluences?.[mesh] == null) {
          return;
        }
        child.morphTargetInfluences[mesh] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[mesh],
          value,
          speed
        );
        if (!setupMode) {
          try {
            set({ [target]: value });
          } catch (e) {
            // do thing
          }
        }
      }
    });
  };

  useEffect(() => {
    if (!reply.audio) {
      return;
    }
    audio.current = new Audio(reply.audio);
    audio.current?.play();
    setLipsync(reply.lipsync);

    return () => {
      audio.current?.remove();
    };
  }, [reply]);

  useFrame((_, delta) => {
    if (mixer && model.current) {
      mixer.current?.update(delta);
    }
    if (setupMode) {
      return;
    }
    Object.keys(nodes.Head_Mesh.morphTargetDictionary ?? {}).forEach((key) => {
      const mapping = facialExpressions[facialExpression];
      if (mapping && mapping[key] != null) {
        lerp(key, mapping[key], 0.1);
      } else {
        lerp(key, 0, 0.1);
      }
    });

    // lipsync

    if (audio.current && lipsync) {
      for (const mouthCue of lipsync.mouthCues) {
        const currentAudioTime = audio.current.currentTime;
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end &&
          corresponding[mouthCue.value] != null
        ) {
          lerp(corresponding[mouthCue.value], 1, 0.2);
        }
      }
    }
  });

  const [, set] = useControls("MorphTargets", () => {
    const options: Schema = {};
    Object.entries(nodes.Head_Mesh.morphTargetDictionary ?? {}).forEach(
      ([key, val]) => {
        options[key] = {
          label: key,
          value: 0,
          min: nodes.Head_Mesh.morphTargetInfluences?.[val] ?? 0,
          max: 1,
          onChange: (y: number) => {
            setupMode && lerp(key, y, 1);
          },
        };
      }
    );
    return options;
  });

  useEffect(() => {
    if (actions && Object.keys(actions).length > 0 && model.current) {
      console.log("play", animation, actions);
      actions[animation]?.reset().fadeIn(0.5).play();
    }
    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [animation, actions]);

  return (
    <>
      <group {...props} ref={model} dispose={null}>
        <group userData={{ name: "Armature" }}>
          <primitive object={nodes.Hips} />
          <skinnedMesh
            geometry={nodes.Body_Mesh.geometry}
            material={materials.Body}
            skeleton={nodes.Body_Mesh.skeleton}
            userData={{ name: "Body_Mesh" }}
          />
          <skinnedMesh
            name="Eye_Mesh"
            geometry={nodes.Eye_Mesh.geometry}
            material={materials.Eyes}
            skeleton={nodes.Eye_Mesh.skeleton}
            morphTargetDictionary={nodes.Eye_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.Eye_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "eyeLookDownLeft",
                "eyeLookDownRight",
                "eyeLookUpLeft",
                "eyeLookUpRight",
                "eyeLookInLeft",
                "eyeLookInRight",
                "eyeLookOutLeft",
                "eyeLookOutRight",
                "eyesClosed",
                "eyesLookUp",
                "eyesLookDown",
              ],
              name: "Eye_Mesh",
            }}
          />
          <skinnedMesh
            name="EyeAO_Mesh"
            geometry={nodes.EyeAO_Mesh.geometry}
            material={materials.EyeAO}
            skeleton={nodes.EyeAO_Mesh.skeleton}
            morphTargetDictionary={nodes.EyeAO_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeAO_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "browDownLeft",
                "browDownRight",
                "browInnerUp",
                "browOuterUpLeft",
                "browOuterUpRight",
                "eyeSquintLeft",
                "eyeSquintRight",
                "noseSneerLeft",
                "noseSneerRight",
                "cheekPuff",
                "cheekSquintLeft",
                "cheekSquintRight",
                "mouthSmile",
                "mouthLeft",
                "mouthRight",
                "mouthSmileLeft",
                "mouthSmileRight",
                "eyeWideLeft",
                "eyeWideRight",
                "eyeLookDownLeft",
                "eyeLookDownRight",
                "eyeLookUpLeft",
                "eyeLookUpRight",
                "eyeLookInLeft",
                "eyeLookInRight",
                "eyeLookOutLeft",
                "eyeLookOutRight",
                "eyeBlinkLeft",
                "eyeBlinkRight",
                "eyesClosed",
                "eyesLookUp",
                "eyesLookDown",
              ],
              name: "EyeAO_Mesh",
            }}
          />
          <skinnedMesh
            name="Eyelash_Mesh"
            geometry={nodes.Eyelash_Mesh.geometry}
            material={materials.Eyelash}
            skeleton={nodes.Eyelash_Mesh.skeleton}
            morphTargetDictionary={nodes.Eyelash_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.Eyelash_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "browDownLeft",
                "browDownRight",
                "browInnerUp",
                "browOuterUpLeft",
                "browOuterUpRight",
                "eyeSquintLeft",
                "eyeSquintRight",
                "eyeWideLeft",
                "eyeWideRight",
                "noseSneerLeft",
                "noseSneerRight",
                "eyeLookDownLeft",
                "eyeLookDownRight",
                "eyeLookUpLeft",
                "eyeLookUpRight",
                "eyeLookInLeft",
                "eyeLookInRight",
                "eyeLookOutLeft",
                "eyeLookOutRight",
                "cheekSquintLeft",
                "cheekSquintRight",
                "eyeBlinkLeft",
                "eyeBlinkRight",
                "eyesClosed",
                "eyesLookUp",
                "eyesLookDown",
                "mouthSmile",
                "mouthSmileLeft",
                "mouthSmileRight",
                "mouthUpperUpLeft",
                "mouthUpperUpRight",
              ],
              name: "Eyelash_Mesh",
            }}
          />
          <skinnedMesh
            name="Head_Mesh"
            geometry={nodes.Head_Mesh.geometry}
            material={materials.Head}
            skeleton={nodes.Head_Mesh.skeleton}
            morphTargetDictionary={nodes.Head_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.Head_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "mouthOpen",
                "viseme_sil",
                "viseme_PP",
                "viseme_FF",
                "viseme_TH",
                "eyeWideLeft",
                "eyeWideRight",
                "eyeLookDownLeft",
                "eyeLookDownRight",
                "eyeLookUpLeft",
                "eyeLookUpRight",
                "eyeLookInLeft",
                "eyeLookInRight",
                "eyeLookOutLeft",
                "eyeLookOutRight",
                "cheekSquintLeft",
                "cheekSquintRight",
                "mouthRollUpper",
                "eyeBlinkLeft",
                "eyeBlinkRight",
                "eyesClosed",
                "eyesLookUp",
                "eyesLookDown",
                "mouthClose",
                "mouthFrownLeft",
                "mouthFrownRight",
                "mouthFunnel",
                "mouthPressLeft",
                "mouthPressRight",
                "mouthStretchLeft",
                "mouthStretchRight",
                "tongueOut",
                "mouthDimpleLeft",
                "mouthDimpleRight",
                "jawLeft",
                "jawRight",
                "eyeSquintLeft",
                "eyeSquintRight",
                "mouthLowerDownLeft",
                "mouthLowerDownRight",
                "mouthUpperUpLeft",
                "mouthUpperUpRight",
                "mouthSmileLeft",
                "mouthSmileRight",
                "mouthLeft",
                "mouthRight",
                "mouthPucker",
                "mouthSmile",
                "jawForward",
                "jawOpen",
                "mouthRollLower",
                "cheekPuff",
                "noseSneerRight",
                "noseSneerLeft",
                "mouthShrugLower",
                "mouthShrugUpper",
                "viseme_DD",
                "viseme_kk",
                "viseme_CH",
                "viseme_SS",
                "viseme_nn",
                "viseme_RR",
                "viseme_aa",
                "viseme_E",
                "viseme_I",
                "viseme_O",
                "viseme_U",
                "browDownLeft",
                "browDownRight",
                "browInnerUp",
                "browOuterUpLeft",
                "browOuterUpRight",
              ],
              name: "Head_Mesh",
            }}
          />
          <skinnedMesh
            name="Teeth_Mesh"
            geometry={nodes.Teeth_Mesh.geometry}
            material={materials.Teeth}
            skeleton={nodes.Teeth_Mesh.skeleton}
            morphTargetDictionary={nodes.Teeth_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.Teeth_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "mouthOpen",
                "viseme_sil",
                "viseme_PP",
                "viseme_FF",
                "viseme_TH",
                "viseme_DD",
                "viseme_kk",
                "viseme_CH",
                "viseme_SS",
                "viseme_nn",
                "viseme_RR",
                "viseme_aa",
                "viseme_E",
                "viseme_I",
                "viseme_O",
                "viseme_U",
                "jawOpen",
                "jawForward",
                "jawLeft",
                "jawRight",
              ],
              name: "Teeth_Mesh",
            }}
          />
          <skinnedMesh
            name="Tongue_Mesh"
            geometry={nodes.Tongue_Mesh.geometry}
            material={materials.Teeth}
            skeleton={nodes.Tongue_Mesh.skeleton}
            morphTargetDictionary={nodes.Tongue_Mesh.morphTargetDictionary}
            morphTargetInfluences={nodes.Tongue_Mesh.morphTargetInfluences}
            userData={{
              targetNames: [
                "mouthOpen",
                "viseme_sil",
                "viseme_PP",
                "viseme_FF",
                "viseme_TH",
                "viseme_DD",
                "viseme_kk",
                "viseme_CH",
                "viseme_SS",
                "viseme_nn",
                "viseme_RR",
                "viseme_aa",
                "viseme_E",
                "viseme_I",
                "viseme_O",
                "viseme_U",
                "jawOpen",
                "jawForward",
                "jawLeft",
                "jawRight",
                "tongueOut",
              ],
              name: "Tongue_Mesh",
            }}
          />
          <skinnedMesh
            geometry={nodes.avaturn_hair_0.geometry}
            material={materials.avaturn_hair_0_material}
            skeleton={nodes.avaturn_hair_0.skeleton}
            userData={{ name: "avaturn_hair_0" }}
          />
          {nodes.avaturn_hair_1 && (
            <skinnedMesh
              geometry={nodes.avaturn_hair_1.geometry}
              material={materials.avaturn_hair_1_material}
              skeleton={nodes.avaturn_hair_1.skeleton}
              userData={{ name: "avaturn_hair_1" }}
            />
          )}
          <skinnedMesh
            geometry={nodes.avaturn_shoes_0.geometry}
            material={materials.avaturn_shoes_0_material}
            skeleton={nodes.avaturn_shoes_0.skeleton}
            userData={{ name: "avaturn_shoes_0" }}
          />
          <skinnedMesh
            geometry={nodes.avaturn_look_0.geometry}
            material={materials.avaturn_look_0_material}
            skeleton={nodes.avaturn_look_0.skeleton}
            userData={{ name: "avaturn_look_0" }}
          />
        </group>
      </group>
    </>
  );
}
