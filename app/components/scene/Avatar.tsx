/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useAnimations, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import { Schema } from "leva/dist/declarations/src/types";
import { ILipSync } from "~/types/chat.type";
import { useChat } from "../chat/ChatProvider";

type GLTFResult = GLTF & {
  nodes: {
    EyeLeft: THREE.SkinnedMesh;
    EyeRight: THREE.SkinnedMesh;
    Wolf3D_Head: THREE.SkinnedMesh;
    Wolf3D_Teeth: THREE.SkinnedMesh;
    Wolf3D_Hair: THREE.SkinnedMesh;
    Wolf3D_Body: THREE.SkinnedMesh;
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
    Wolf3D_Outfit_Top: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    Wolf3D_Eye: THREE.MeshStandardMaterial;
    Wolf3D_Skin: THREE.MeshStandardMaterial;
    Wolf3D_Teeth: THREE.MeshStandardMaterial;
    Wolf3D_Hair: THREE.MeshStandardMaterial;
    Wolf3D_Body: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;
  };
};

let setupMode = false;

const corresponding = {
  0: "viseme_sil",
  1: "viseme_nn",
  2: "viseme_E",
  3: "viseme_aa",
  4: "viseme_CH",
  5: "viseme_O",
  7: "viseme_I",
  8: "viseme_U",
  9: "viseme_TH",
  10: "viseme_DD",
  11: "viseme_RR",
  12: "viseme_FF",
  14: "viseme_SS",
  18: "viseme_kk",
  19: "viseme_PP",
} as { [x: string]: string };

export function Avatar(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials, scene } = useGLTF(
    "/models/67ced08b15151efc82ffba2e.glb"
  ) as GLTFResult;

  const { animations } = useGLTF("/models/animations.glb");

  const model = useRef<THREE.Group<THREE.Object3DEventMap> | null>(null);

  const { actions } = useAnimations(animations, model);

  const [facialExpression, setFacialExpression] = useState("");

  const [lipsync, setLipsync] = useState<undefined | ILipSync>();

  const audio = useRef<HTMLAudioElement | null>();

  const { reply } = useChat();

  const [animation, setAnimation] = useState<string>(() =>
    animations.find((e) => e.name === "Idle") ? "Idle" : animations[0].name
  );

  const facialExpressions = {
    default: {},
    smile: {
      browInnerUp: 0.17,
      eyeSquintLeft: 0.4,
      eyeSquintRight: 0.44,
      noseSneerLeft: 0.1700000727403593,
      noseSneerRight: 0.14000002836874015,
      mouthPressLeft: 0.61,
      mouthPressRight: 0.41000000000000003,
    },
    funnyFace: {
      jawLeft: 0.63,
      mouthPucker: 0.53,
      noseSneerLeft: 1,
      noseSneerRight: 0.39,
      mouthLeft: 1,
      eyeLookUpLeft: 1,
      eyeLookUpRight: 1,
      cheekPuff: 0.9999924982764238,
      mouthDimpleLeft: 0.414743888682652,
      mouthRollLower: 0.32,
      mouthSmileLeft: 0.35499733688813034,
      mouthSmileRight: 0.35499733688813034,
    },
  } as Record<string, { [key: string]: number }>;

  useControls("AvatarControls", {
    animation: {
      value: animation,
      options: animations.map((e) => e.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      value: "default",
      options: Object.keys(facialExpressions),
      onChange: (val) => setFacialExpression(val),
    },
    enableSetup: button(() => (setupMode = true)),
    disableSetup: button(() => (setupMode = false)),
  });

  const lerp = (target: string, value: number, speed = 0.1) => {
    scene.traverse((child) => {
      if (child instanceof THREE.SkinnedMesh && child.morphTargetDictionary) {
        const mesh = child.morphTargetDictionary[target];
        if (mesh == null || child.morphTargetInfluences?.[mesh] == null) {
          return;
        }
        child.morphTargetInfluences[mesh] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[mesh],
          value,
          speed
        );
        if (!setupMode) {
          try {
            set({ [target]: value });
          } catch (e) {
            // do thing
          }
        }
      }
    });
  };

  useEffect(() => {
    if (!reply.audio) {
      return;
    }
    audio.current = new Audio(reply.audio);
    audio.current?.play();
    setLipsync(reply.lipsync);

    return () => {
      audio.current?.remove();
    };
  }, [reply]);

  useFrame(() => {
    if (setupMode) {
      return;
    }
    Object.keys(nodes.EyeLeft.morphTargetDictionary ?? {}).forEach((key) => {
      const mapping = facialExpressions[facialExpression];
      if (mapping && mapping[key] != null) {
        lerp(key, mapping[key], 0.1);
      } else {
        lerp(key, 0, 0.1);
      }
    });

    // lipsync

    if (audio.current && lipsync) {
      for (const mouthCue of lipsync.mouthCues) {
        const currentAudioTime = audio.current.currentTime;
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end &&
          corresponding[mouthCue.value] != null
        ) {
          lerp(corresponding[mouthCue.value], 1, 0.2);
        }
      }
    }
  });

  const [, set] = useControls("MorphTargets", () => {
    const options: Schema = {};
    console.log(Object.keys(nodes.EyeLeft.morphTargetDictionary!));
    Object.entries(nodes.EyeLeft.morphTargetDictionary ?? {}).forEach(
      ([key, val]) => {
        options[key] = {
          label: key,
          value: 0,
          min: nodes.EyeLeft.morphTargetInfluences?.[val] ?? 0,
          max: 1,
          onChange: (y: number) => {
            setupMode && lerp(key, y, 1);
          },
        };
      }
    );
    return options;
  });

  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.5).play();

    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [animation, actions]);

  return (
    <group {...props} dispose={null} ref={model}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/67ced08b15151efc82ffba2e.glb");
useGLTF.preload("/models/animations.glb");
